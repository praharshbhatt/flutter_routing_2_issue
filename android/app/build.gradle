def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// TODO: can this come from translation file? It can on pure Android, how about flutter?
def baseAppName = "Tribes"

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.dakiadigital.hypribes20"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName '0.1.0'
    }

    flavorDimensions "flavors"
    productFlavors {
        development {
            dimension "flavors"
            applicationIdSuffix ".dev"
            versionNameSuffix "-DEV"
        }
        staging {
            dimension "flavors"
            applicationIdSuffix ".staging"
            versionNameSuffix "-STAGING"
        }
        production {
            dimension "flavors"
        }
    }

    productFlavors.all { flavour ->
        if (flavour.name.equals("production")) {
            manifestPlaceholders = [
                    app_name: baseAppName
            ]
        } else if (flavour.name.equals("staging")) {
            manifestPlaceholders = [
                    app_name: "${baseAppName} Staging"
            ]
        } else {
            manifestPlaceholders = [
                    app_name: "${baseAppName} Dev"
            ]
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}
